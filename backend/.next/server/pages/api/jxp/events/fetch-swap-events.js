"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/jxp/events/fetch-swap-events";
exports.ids = ["pages/api/jxp/events/fetch-swap-events"];
exports.modules = {

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "viem":
/*!***********************!*\
  !*** external "viem" ***!
  \***********************/
/***/ ((module) => {

module.exports = import("viem");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fjxp%2Fevents%2Ffetch-swap-events&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cjxp%5Cevents%5Cfetch-swap-events.ts&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fjxp%2Fevents%2Ffetch-swap-events&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cjxp%5Cevents%5Cfetch-swap-events.ts&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_jxp_events_fetch_swap_events_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\jxp\\events\\fetch-swap-events.ts */ \"(api)/./pages/api/jxp/events/fetch-swap-events.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_jxp_events_fetch_swap_events_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_jxp_events_fetch_swap_events_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_jxp_events_fetch_swap_events_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_jxp_events_fetch_swap_events_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/jxp/events/fetch-swap-events\",\n        pathname: \"/api/jxp/events/fetch-swap-events\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_jxp_events_fetch_swap_events_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmp4cCUyRmV2ZW50cyUyRmZldGNoLXN3YXAtZXZlbnRzJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNqeHAlNUNldmVudHMlNUNmZXRjaC1zd2FwLWV2ZW50cy50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUM0RTtBQUM1RTtBQUNBLGlFQUFlLHdFQUFLLENBQUMsdUVBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHVFQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ppa3VuYS1zd2FwLWJhY2tlbmQvPzhhNDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxqeHBcXFxcZXZlbnRzXFxcXGZldGNoLXN3YXAtZXZlbnRzLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvanhwL2V2ZW50cy9mZXRjaC1zd2FwLWV2ZW50c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2p4cC9ldmVudHMvZmV0Y2gtc3dhcC1ldmVudHNcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fjxp%2Fevents%2Ffetch-swap-events&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cjxp%5Cevents%5Cfetch-swap-events.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./config/chains.ts":
/*!**************************!*\
  !*** ./config/chains.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NATIVE_TOKEN_ADDRESS: () => (/* binding */ NATIVE_TOKEN_ADDRESS),\n/* harmony export */   monadTestnet: () => (/* binding */ monadTestnet)\n/* harmony export */ });\nconst monadTestnet = {\n    id: 1337,\n    name: \"Monad Testnet\",\n    network: \"monad-testnet\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Monad\",\n        symbol: \"MON\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://testnet-rpc.monad.xyz\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://testnet-rpc.monad.xyz\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Monad Explorer\",\n            url: \"https://explorer.monad.xyz\"\n        }\n    }\n};\nconst NATIVE_TOKEN_ADDRESS = \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9jb25maWcvY2hhaW5zLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRU8sTUFBTUEsZUFBZTtJQUMxQkMsSUFBSTtJQUNKQyxNQUFNO0lBQ05DLFNBQVM7SUFDVEMsZ0JBQWdCO1FBQ2RDLFVBQVU7UUFDVkgsTUFBTTtRQUNOSSxRQUFRO0lBQ1Y7SUFDQUMsU0FBUztRQUNQQyxTQUFTO1lBQ1BDLE1BQU07Z0JBQUM7YUFBZ0M7UUFDekM7UUFDQUMsUUFBUTtZQUNORCxNQUFNO2dCQUFDO2FBQWdDO1FBQ3pDO0lBQ0Y7SUFDQUUsZ0JBQWdCO1FBQ2RILFNBQVM7WUFDUE4sTUFBTTtZQUNOVSxLQUFLO1FBQ1A7SUFDRjtBQUNGLEVBQUM7QUFFTSxNQUFNQyx1QkFBdUIsNkNBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamlrdW5hLXN3YXAtYmFja2VuZC8uL2NvbmZpZy9jaGFpbnMudHM/MmViMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVDaGFpbiB9IGZyb20gJ3ZpZW0nXHJcblxyXG5leHBvcnQgY29uc3QgbW9uYWRUZXN0bmV0ID0ge1xyXG4gIGlkOiAxMzM3LFxyXG4gIG5hbWU6ICdNb25hZCBUZXN0bmV0JyxcclxuICBuZXR3b3JrOiAnbW9uYWQtdGVzdG5ldCcsXHJcbiAgbmF0aXZlQ3VycmVuY3k6IHtcclxuICAgIGRlY2ltYWxzOiAxOCxcclxuICAgIG5hbWU6ICdNb25hZCcsXHJcbiAgICBzeW1ib2w6ICdNT04nLFxyXG4gIH0sXHJcbiAgcnBjVXJsczoge1xyXG4gICAgZGVmYXVsdDoge1xyXG4gICAgICBodHRwOiBbJ2h0dHBzOi8vdGVzdG5ldC1ycGMubW9uYWQueHl6J10sXHJcbiAgICB9LFxyXG4gICAgcHVibGljOiB7XHJcbiAgICAgIGh0dHA6IFsnaHR0cHM6Ly90ZXN0bmV0LXJwYy5tb25hZC54eXonXSxcclxuICAgIH0sXHJcbiAgfSxcclxuICBibG9ja0V4cGxvcmVyczoge1xyXG4gICAgZGVmYXVsdDoge1xyXG4gICAgICBuYW1lOiAnTW9uYWQgRXhwbG9yZXInLFxyXG4gICAgICB1cmw6ICdodHRwczovL2V4cGxvcmVyLm1vbmFkLnh5eicsXHJcbiAgICB9LFxyXG4gIH0sXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBOQVRJVkVfVE9LRU5fQUREUkVTUyA9ICcweEVlZWVlRWVlZUVlRWVlRWVFZUVlZUVFRWVlZWVFZWVlZWVlZUVFZUUnICJdLCJuYW1lcyI6WyJtb25hZFRlc3RuZXQiLCJpZCIsIm5hbWUiLCJuZXR3b3JrIiwibmF0aXZlQ3VycmVuY3kiLCJkZWNpbWFscyIsInN5bWJvbCIsInJwY1VybHMiLCJkZWZhdWx0IiwiaHR0cCIsInB1YmxpYyIsImJsb2NrRXhwbG9yZXJzIiwidXJsIiwiTkFUSVZFX1RPS0VOX0FERFJFU1MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./config/chains.ts\n");

/***/ }),

/***/ "(api)/./config/contracts.ts":
/*!*****************************!*\
  !*** ./config/contracts.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminWallet: () => (/* binding */ adminWallet),\n/* harmony export */   contracts: () => (/* binding */ contracts)\n/* harmony export */ });\nconst contracts = {\n    jikunaSwap: {\n        address: process.env.JIKUNA_SWAP_ADDRESS || \"0x9906c1FbaD6262E72fC3aA1db42A89a3629f93EE\",\n        fromBlock: BigInt(0)\n    },\n    jikunaSwapETH: {\n        address: process.env.JIKUNA_SWAP_ETH_ADDRESS || \"0x0f36AF6f7EA2b7708D756991E1f13ec0Add23998\",\n        fromBlock: BigInt(0)\n    },\n    jikunaXtraPointsV2: {\n        address: process.env.JXP_CONTRACT_ADDRESS || \"0x1b869CEaC99F779e881DbD1354a3582F8bca9Af3\"\n    }\n};\nconst adminWallet = {\n    address: \"0x3E5350732810d539541d5e36DCB9777816E8c934\"\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9jb25maWcvY29udHJhY3RzLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sTUFBTUEsWUFBWTtJQUN2QkMsWUFBWTtRQUNWQyxTQUFTQyxRQUFRQyxHQUFHLENBQUNDLG1CQUFtQixJQUFJO1FBQzVDQyxXQUFXQyxPQUFPO0lBQ3BCO0lBQ0FDLGVBQWU7UUFDYk4sU0FBU0MsUUFBUUMsR0FBRyxDQUFDSyx1QkFBdUIsSUFBSTtRQUNoREgsV0FBV0MsT0FBTztJQUNwQjtJQUNBRyxvQkFBb0I7UUFDbEJSLFNBQVNDLFFBQVFDLEdBQUcsQ0FBQ08sb0JBQW9CLElBQUk7SUFDL0M7QUFDRixFQUFDO0FBRU0sTUFBTUMsY0FBYztJQUN6QlYsU0FBUztBQUNYLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qaWt1bmEtc3dhcC1iYWNrZW5kLy4vY29uZmlnL2NvbnRyYWN0cy50cz80YjU3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBjb250cmFjdHMgPSB7XHJcbiAgamlrdW5hU3dhcDoge1xyXG4gICAgYWRkcmVzczogcHJvY2Vzcy5lbnYuSklLVU5BX1NXQVBfQUREUkVTUyB8fCAnMHg5OTA2YzFGYmFENjI2MkU3MmZDM2FBMWRiNDJBODlhMzYyOWY5M0VFJyxcclxuICAgIGZyb21CbG9jazogQmlnSW50KDApLCAvLyBVcGRhdGUgdGhpcyB3aXRoIGFjdHVhbCBkZXBsb3ltZW50IGJsb2NrIGZvciBwcm9kdWN0aW9uXHJcbiAgfSxcclxuICBqaWt1bmFTd2FwRVRIOiB7XHJcbiAgICBhZGRyZXNzOiBwcm9jZXNzLmVudi5KSUtVTkFfU1dBUF9FVEhfQUREUkVTUyB8fCAnMHgwZjM2QUY2ZjdFQTJiNzcwOEQ3NTY5OTFFMWYxM2VjMEFkZDIzOTk4JyxcclxuICAgIGZyb21CbG9jazogQmlnSW50KDApLCAvLyBVcGRhdGUgdGhpcyB3aXRoIGFjdHVhbCBkZXBsb3ltZW50IGJsb2NrIGZvciBwcm9kdWN0aW9uXHJcbiAgfSxcclxuICBqaWt1bmFYdHJhUG9pbnRzVjI6IHtcclxuICAgIGFkZHJlc3M6IHByb2Nlc3MuZW52LkpYUF9DT05UUkFDVF9BRERSRVNTIHx8ICcweDFiODY5Q0VhQzk5Rjc3OWU4ODFEYkQxMzU0YTM1ODJGOGJjYTlBZjMnLFxyXG4gIH0sXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBhZG1pbldhbGxldCA9IHtcclxuICBhZGRyZXNzOiAnMHgzRTUzNTA3MzI4MTBkNTM5NTQxZDVlMzZEQ0I5Nzc3ODE2RThjOTM0JywgLy8gQWRtaW4gd2l0aCBVUERBVEVSIHJvbGVcclxufSAiXSwibmFtZXMiOlsiY29udHJhY3RzIiwiamlrdW5hU3dhcCIsImFkZHJlc3MiLCJwcm9jZXNzIiwiZW52IiwiSklLVU5BX1NXQVBfQUREUkVTUyIsImZyb21CbG9jayIsIkJpZ0ludCIsImppa3VuYVN3YXBFVEgiLCJKSUtVTkFfU1dBUF9FVEhfQUREUkVTUyIsImppa3VuYVh0cmFQb2ludHNWMiIsIkpYUF9DT05UUkFDVF9BRERSRVNTIiwiYWRtaW5XYWxsZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./config/contracts.ts\n");

/***/ }),

/***/ "(api)/./lib/blockchain/event-listener.ts":
/*!******************************************!*\
  !*** ./lib/blockchain/event-listener.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchNewSwapEvents: () => (/* binding */ fetchNewSwapEvents)\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viem */ \"viem\");\n/* harmony import */ var _config_chains__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/config/chains */ \"(api)/./config/chains.ts\");\n/* harmony import */ var _config_contracts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/config/contracts */ \"(api)/./config/contracts.ts\");\n/* harmony import */ var _lib_database_swap_events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/database/swap-events */ \"(api)/./lib/database/swap-events.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([viem__WEBPACK_IMPORTED_MODULE_0__]);\nviem__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// Initialize global variables if not already set\nglobal.lastProcessedBlockJikunaSwap = global.lastProcessedBlockJikunaSwap || undefined;\nglobal.lastProcessedBlockJikunaSwapETH = global.lastProcessedBlockJikunaSwapETH || undefined;\n// Initialize Viem client\nconst client = (0,viem__WEBPACK_IMPORTED_MODULE_0__.createPublicClient)({\n    chain: (0,viem__WEBPACK_IMPORTED_MODULE_0__.defineChain)(_config_chains__WEBPACK_IMPORTED_MODULE_1__.monadTestnet),\n    transport: (0,viem__WEBPACK_IMPORTED_MODULE_0__.http)(process.env.MONAD_RPC_URL || \"https://testnet-rpc.monad.xyz\")\n});\n// Define event ABIs directly as const objects - FIXED: matching debug-tx.ts implementation\nconst swapEventAbi = {\n    anonymous: false,\n    inputs: [\n        {\n            indexed: true,\n            name: \"sender\",\n            type: \"address\"\n        },\n        {\n            indexed: false,\n            name: \"amount0In\",\n            type: \"uint256\"\n        },\n        {\n            indexed: false,\n            name: \"amount1In\",\n            type: \"uint256\"\n        },\n        {\n            indexed: false,\n            name: \"amount0Out\",\n            type: \"uint256\"\n        },\n        {\n            indexed: false,\n            name: \"amount1Out\",\n            type: \"uint256\"\n        },\n        {\n            indexed: true,\n            name: \"to\",\n            type: \"address\"\n        },\n        {\n            indexed: true,\n            name: \"tokenIn\",\n            type: \"address\"\n        },\n        {\n            indexed: true,\n            name: \"tokenOut\",\n            type: \"address\"\n        }\n    ],\n    name: \"Swap\",\n    type: \"event\"\n};\nconst swapETHEventAbi = {\n    anonymous: false,\n    inputs: [\n        {\n            indexed: true,\n            name: \"sender\",\n            type: \"address\"\n        },\n        {\n            indexed: false,\n            name: \"ethAmount\",\n            type: \"uint256\"\n        },\n        {\n            indexed: false,\n            name: \"tokenAmount\",\n            type: \"uint256\"\n        },\n        {\n            indexed: true,\n            name: \"to\",\n            type: \"address\"\n        },\n        {\n            indexed: true,\n            name: \"token\",\n            type: \"address\"\n        },\n        {\n            indexed: false,\n            name: \"ethToToken\",\n            type: \"bool\"\n        }\n    ],\n    name: \"SwapETH\",\n    type: \"event\"\n};\n// FIXED: Computed event signatures for manual filtering\nconst SWAP_EVENT_SIGNATURE = \"0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822\";\nconst SWAP_ETH_EVENT_SIGNATURE = \"0xec2a1c1a9d76935489efcdc36ed4031c54e1e989a6872ab1d72a7b243198e235\";\n// Track last processed block for each contract\nlet lastProcessedBlockJikunaSwap = _config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwap.fromBlock;\nlet lastProcessedBlockJikunaSwapETH = _config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwapETH.fromBlock;\n// Konstanta untuk batasan RPC\nconst MAX_BLOCKS_PER_QUERY = BigInt(100);\nasync function fetchNewSwapEvents() {\n    const allSwapEvents = [];\n    try {\n        const currentBlock = await client.getBlockNumber();\n        console.log(`Current block: ${currentBlock}, Last processed JikunaSwap: ${lastProcessedBlockJikunaSwap}, Last processed JikunaSwapETH: ${lastProcessedBlockJikunaSwapETH}`);\n        // Jika ini adalah pertama kali kami menjalankan, gunakan blok saat ini - 1000 sebagai awal\n        // untuk menghindari memindai terlalu banyak blok\n        if (lastProcessedBlockJikunaSwap === BigInt(0)) {\n            lastProcessedBlockJikunaSwap = currentBlock > BigInt(1000) ? currentBlock - BigInt(1000) : BigInt(0);\n            console.log(`Initialized lastProcessedBlockJikunaSwap to ${lastProcessedBlockJikunaSwap}`);\n        }\n        if (lastProcessedBlockJikunaSwapETH === BigInt(0)) {\n            lastProcessedBlockJikunaSwapETH = currentBlock > BigInt(1000) ? currentBlock - BigInt(1000) : BigInt(0);\n            console.log(`Initialized lastProcessedBlockJikunaSwapETH to ${lastProcessedBlockJikunaSwapETH}`);\n        }\n        // Cek apakah ada nilai dari reset-blocks endpoint yang tersedia\n        if (global.lastProcessedBlockJikunaSwap) {\n            lastProcessedBlockJikunaSwap = global.lastProcessedBlockJikunaSwap;\n            lastProcessedBlockJikunaSwapETH = global.lastProcessedBlockJikunaSwapETH || global.lastProcessedBlockJikunaSwap;\n            // Reset nilai global agar hanya digunakan sekali\n            global.lastProcessedBlockJikunaSwap = undefined;\n            global.lastProcessedBlockJikunaSwapETH = undefined;\n            console.log(`Using reset blocks - scanning from ${lastProcessedBlockJikunaSwap}`);\n        }\n        // IMPROVED: Increase safety overlap to ensure we don't miss any transactions\n        // Especially important for high-volume periods or network issues\n        const safetyOverlap = BigInt(500);\n        const scanFromJikunaSwap = lastProcessedBlockJikunaSwap > safetyOverlap ? lastProcessedBlockJikunaSwap - safetyOverlap : lastProcessedBlockJikunaSwap;\n        const scanFromJikunaSwapETH = lastProcessedBlockJikunaSwapETH > safetyOverlap ? lastProcessedBlockJikunaSwapETH - safetyOverlap : lastProcessedBlockJikunaSwapETH;\n        console.log(`Adding larger safety overlap: scanning JikunaSwap from ${scanFromJikunaSwap}, JikunaSwapETH from ${scanFromJikunaSwapETH}`);\n        // FIXED: Reduce batch size to avoid any potential RPC limits\n        const originalMaxBlocksPerQuery = MAX_BLOCKS_PER_QUERY;\n        const reducedMaxBlocksPerQuery = BigInt(50);\n        console.log(`Using smaller batch size: ${reducedMaxBlocksPerQuery} blocks per query instead of ${originalMaxBlocksPerQuery}`);\n        // Fetch JikunaSwap events (ERC20-ERC20) in batches with reduced batch size\n        const swapEvents = await fetchJikunaSwapEventsBatched(scanFromJikunaSwap, currentBlock, reducedMaxBlocksPerQuery);\n        allSwapEvents.push(...swapEvents);\n        console.log(`Total ERC20-ERC20 swap events fetched: ${swapEvents.length}`);\n        // Fetch JikunaSwapETH events (ERC20-MON) in batches with reduced batch size\n        const swapETHEvents = await fetchJikunaSwapETHEventsBatched(scanFromJikunaSwapETH, currentBlock, reducedMaxBlocksPerQuery);\n        allSwapEvents.push(...swapETHEvents);\n        console.log(`Total ETH-ERC20 swap events fetched: ${swapETHEvents.length}`);\n        // Update last processed blocks\n        lastProcessedBlockJikunaSwap = currentBlock;\n        lastProcessedBlockJikunaSwapETH = currentBlock;\n        // Save all events to database\n        if (allSwapEvents.length > 0) {\n            console.log(`Saving ${allSwapEvents.length} new swap events to database`);\n            await (0,_lib_database_swap_events__WEBPACK_IMPORTED_MODULE_3__.saveSwapEvents)(allSwapEvents);\n        }\n        return {\n            swapEvents: allSwapEvents,\n            newSwapsCount: allSwapEvents.length\n        };\n    } catch (error) {\n        console.error(\"Error fetching swap events:\", error);\n        throw error;\n    }\n}\nasync function fetchJikunaSwapEventsBatched(fromBlock, toBlock, batchSize = MAX_BLOCKS_PER_QUERY) {\n    const allEvents = [];\n    try {\n        // Proses dalam batch karena RPC memiliki batasan 100 blok per permintaan\n        let startBlock = fromBlock;\n        while(startBlock <= toBlock){\n            const endBlock = startBlock + batchSize > toBlock ? toBlock : startBlock + batchSize;\n            console.log(`Fetching JikunaSwap events from block ${startBlock} to ${endBlock}`);\n            try {\n                const events = await fetchJikunaSwapEvents(startBlock, endBlock);\n                allEvents.push(...events);\n                console.log(`Found ${events.length} JikunaSwap events in batch ${startBlock}-${endBlock}`);\n            } catch (error) {\n                console.error(`Error fetching JikunaSwap events for blocks ${startBlock}-${endBlock}:`, error);\n            }\n            startBlock = endBlock + BigInt(1);\n        }\n        return allEvents;\n    } catch (error) {\n        console.error(\"Error in batch processing JikunaSwap events:\", error);\n        return allEvents;\n    }\n}\nasync function fetchJikunaSwapETHEventsBatched(fromBlock, toBlock, batchSize = MAX_BLOCKS_PER_QUERY) {\n    const allEvents = [];\n    try {\n        // Proses dalam batch karena RPC memiliki batasan 100 blok per permintaan\n        let startBlock = fromBlock;\n        while(startBlock <= toBlock){\n            const endBlock = startBlock + batchSize > toBlock ? toBlock : startBlock + batchSize;\n            console.log(`Fetching JikunaSwapETH events from block ${startBlock} to ${endBlock}`);\n            try {\n                const events = await fetchJikunaSwapETHEvents(startBlock, endBlock);\n                allEvents.push(...events);\n                console.log(`Found ${events.length} JikunaSwapETH events in batch ${startBlock}-${endBlock}`);\n            } catch (error) {\n                console.error(`Error fetching JikunaSwapETH events for blocks ${startBlock}-${endBlock}:`, error);\n            }\n            startBlock = endBlock + BigInt(1);\n        }\n        return allEvents;\n    } catch (error) {\n        console.error(\"Error in batch processing JikunaSwapETH events:\", error);\n        return allEvents;\n    }\n}\nasync function fetchJikunaSwapEvents(fromBlock, toBlock) {\n    try {\n        console.log(`Fetching Swap events from JikunaSwap contract ${_config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwap.address} for blocks ${fromBlock}-${toBlock}`);\n        // Coba fetch transaksi dengan berbagai pendekatan untuk memastikan tidak ada yang terlewat\n        let logs = [];\n        // IMPROVED: More verbose log debugging\n        console.log(`Contract address: ${_config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwap.address}`);\n        console.log(`Event signature: ${SWAP_EVENT_SIGNATURE}`);\n        // Metode 1: Coba dengan event filter standard\n        try {\n            logs = await client.getLogs({\n                address: _config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwap.address,\n                event: swapEventAbi,\n                fromBlock,\n                toBlock\n            });\n            console.log(`Found ${logs.length} logs with standard event filter method from JikunaSwap contract`);\n        } catch (error) {\n            console.error(\"Error with standard event filter method, will try alternatives:\", error);\n        }\n        // Jika metode 1 gagal atau tidak menemukan log\n        if (logs.length === 0) {\n            try {\n                console.log(\"Trying alternative method 1: filter by address only\");\n                const allLogs = await client.getLogs({\n                    address: _config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwap.address,\n                    fromBlock,\n                    toBlock\n                });\n                console.log(`Found ${allLogs.length} logs for contract address, filtering by event signature`);\n                // Filter logs secara manual dengan topic signature yang benar\n                logs = allLogs.filter((log)=>log.topics && log.topics.length > 0 && log.topics[0]?.toLowerCase() === SWAP_EVENT_SIGNATURE.toLowerCase());\n                console.log(`After filtering: ${logs.length} logs match the Swap event signature`);\n            } catch (altError) {\n                console.error(\"Error fetching logs with alternative method 1:\", altError);\n            }\n        }\n        // Metode 3: Jika semua gagal, coba cara paling dasar dengan filter terbatas\n        if (logs.length === 0) {\n            try {\n                console.log(\"Trying alternative method 2: direct transaction fetch\");\n                // Mendapatkan semua logs tanpa filter address\n                const rawLogs = await client.getLogs({\n                    fromBlock,\n                    toBlock\n                });\n                console.log(`Retrieved ${rawLogs.length} raw logs from all addresses`);\n                // Filter manual berdasarkan address dan topic\n                logs = rawLogs.filter((log)=>log.address && log.address.toLowerCase() === _config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwap.address.toLowerCase() && log.topics && log.topics.length > 0 && log.topics[0]?.toLowerCase() === SWAP_EVENT_SIGNATURE.toLowerCase());\n                console.log(`After double filtering: ${logs.length} logs match the Swap event criteria`);\n            } catch (emergencyError) {\n                console.error(\"Emergency method failed:\", emergencyError);\n            }\n        }\n        console.log(`Total ${logs.length} raw logs found from JikunaSwap contract`);\n        // IMPROVED: Add all transaction hashes to debug log\n        if (logs.length > 0) {\n            console.log(\"Transaction hashes in these logs:\");\n            for (const log of logs){\n                console.log(`  - ${log.transactionHash}, block: ${log.blockNumber}`);\n            }\n        }\n        const swapEvents = [];\n        for (const log of logs){\n            try {\n                console.log(`\\nProcessing log: ${JSON.stringify({\n                    blockNumber: log.blockNumber,\n                    txHash: log.transactionHash,\n                    address: log.address,\n                    topics: log.topics.map((t)=>t?.toString())\n                })}`);\n                // Basic validation\n                if (!log.transactionHash) {\n                    console.log(`Skipping log with missing transaction hash`);\n                    continue;\n                }\n                // Check if we've already processed this transaction\n                const existingEvent = await (0,_lib_database_swap_events__WEBPACK_IMPORTED_MODULE_3__.getSwapEventByTxHash)(log.transactionHash);\n                if (existingEvent) {\n                    console.log(`Skipping already processed tx: ${log.transactionHash}`);\n                    continue;\n                }\n                // IMPROVED: Better extraction of indexed parameters\n                // Extract sender from topic 1\n                const sender = log.topics[1] ? `0x${log.topics[1].substring(log.topics[1].length - 40)}` : undefined;\n                // Extract to address from topic 2\n                const to = log.topics[2] ? `0x${log.topics[2].substring(log.topics[2].length - 40)}` : undefined;\n                // Extract tokenIn from topic 3\n                const tokenIn = log.topics[3] ? `0x${log.topics[3].substring(log.topics[3].length - 40)}` : undefined;\n                // Extract tokenOut from topic 4\n                const tokenOut = log.topics.length > 4 && log.topics[4] ? `0x${log.topics[4].substring(log.topics[4].length - 40)}` : undefined;\n                console.log(`Extracted parameters: sender=${sender}, to=${to}, tokenIn=${tokenIn}, tokenOut=${tokenOut}`);\n                if (!sender) {\n                    console.log(`Skipping log due to missing sender address`);\n                    continue;\n                }\n                // Default values if we can't extract properly\n                // Not ideal but allows processing to continue\n                const usedTokenIn = tokenIn || _config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwap.address;\n                const usedTokenOut = tokenOut || _config_chains__WEBPACK_IMPORTED_MODULE_1__.NATIVE_TOKEN_ADDRESS;\n                // Default values for non-indexed params - we'll try to decode these from data\n                let amount0In = BigInt(0);\n                let amount1In = BigInt(0);\n                let amount0Out = BigInt(0);\n                let amount1Out = BigInt(0);\n                // Try to parse non-indexed values from data if available\n                try {\n                    if (log.data && log.data !== \"0x\") {\n                        // Simplified parsing - in a real implementation, you would need proper ABI decoding\n                        // Here we're just assuming the data format matches what we expect\n                        const data = log.data.slice(2); // remove '0x'\n                        if (data.length >= 256) {\n                            // Parse 4 uint256 values\n                            amount0In = BigInt(\"0x\" + data.slice(0, 64));\n                            amount1In = BigInt(\"0x\" + data.slice(64, 128));\n                            amount0Out = BigInt(\"0x\" + data.slice(128, 192));\n                            amount1Out = BigInt(\"0x\" + data.slice(192, 256));\n                            console.log(`Parsed amounts: amount0In=${amount0In}, amount1In=${amount1In}, amount0Out=${amount0Out}, amount1Out=${amount1Out}`);\n                        }\n                    }\n                } catch (decodeError) {\n                    console.error(\"Error decoding data:\", decodeError);\n                    // Fall back to default values\n                    console.log(\"Using default values due to decode error\");\n                    amount0In = BigInt(\"1000000000000000000\"); // 1 token as fallback\n                    amount1In = BigInt(0);\n                    amount0Out = BigInt(0);\n                    amount1Out = BigInt(\"1000000000000000000\"); // 1 token as fallback\n                }\n                // Determine amounts based on which token is in vs out\n                const amountIn = amount0In > 0 ? amount0In : amount1In;\n                const amountOut = amount0Out > 0 ? amount0Out : amount1Out;\n                // Use default if both are zero (unlikely but possible due to parsing issues)\n                const finalAmountIn = amountIn > 0 ? amountIn : BigInt(\"1000000000000000000\");\n                const finalAmountOut = amountOut > 0 ? amountOut : BigInt(\"1000000000000000000\");\n                // Calculate volume in MON (simplified approach)\n                let volumeMON = 10 // Default example value\n                ;\n                // If either token is MON or WMON, use that amount directly\n                if (usedTokenIn.toLowerCase() === _config_chains__WEBPACK_IMPORTED_MODULE_1__.NATIVE_TOKEN_ADDRESS.toLowerCase() || usedTokenIn.toLowerCase() === _config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwapETH.address.toLowerCase()) {\n                    volumeMON = Number((0,viem__WEBPACK_IMPORTED_MODULE_0__.formatEther)(finalAmountIn));\n                } else if (usedTokenOut.toLowerCase() === _config_chains__WEBPACK_IMPORTED_MODULE_1__.NATIVE_TOKEN_ADDRESS.toLowerCase() || usedTokenOut.toLowerCase() === _config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwapETH.address.toLowerCase()) {\n                    volumeMON = Number((0,viem__WEBPACK_IMPORTED_MODULE_0__.formatEther)(finalAmountOut));\n                }\n                // Calculate JXP (1 JXP per 10 MON volume)\n                const calculatedJXP = Math.floor(volumeMON / 10);\n                const swapEvent = {\n                    user: sender,\n                    timestamp: new Date(),\n                    txHash: log.transactionHash,\n                    tokenIn: usedTokenIn,\n                    tokenOut: usedTokenOut,\n                    amountIn: finalAmountIn.toString(),\n                    amountOut: finalAmountOut.toString(),\n                    volumeMON,\n                    calculatedJXP,\n                    processed: false\n                };\n                console.log(`Created swap event: ${JSON.stringify(swapEvent)}`);\n                swapEvents.push(swapEvent);\n            } catch (logError) {\n                console.error(`Error processing individual log: ${logError}`);\n            }\n        }\n        return swapEvents;\n    } catch (error) {\n        console.error(\"Error fetching JikunaSwap events:\", error);\n        return [];\n    }\n}\nasync function fetchJikunaSwapETHEvents(fromBlock, toBlock) {\n    try {\n        console.log(`Fetching SwapETH events from JikunaSwapETH contract ${_config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwapETH.address} for blocks ${fromBlock}-${toBlock}`);\n        // Coba fetch transaksi dengan berbagai pendekatan untuk memastikan tidak ada yang terlewat\n        let logs = [];\n        // IMPROVED: More verbose log debugging\n        console.log(`Contract address: ${_config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwapETH.address}`);\n        console.log(`Event signature: ${SWAP_ETH_EVENT_SIGNATURE}`);\n        // Metode 1: Coba dengan event filter standard\n        try {\n            logs = await client.getLogs({\n                address: _config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwapETH.address,\n                event: swapETHEventAbi,\n                fromBlock,\n                toBlock\n            });\n            console.log(`Found ${logs.length} logs with standard event filter method from JikunaSwapETH contract`);\n        } catch (error) {\n            console.error(\"Error with standard event filter method for ETH swap, will try alternatives:\", error);\n        }\n        // Jika metode 1 gagal atau tidak menemukan log\n        if (logs.length === 0) {\n            try {\n                console.log(\"Trying alternative method 1: filter by address only\");\n                const allLogs = await client.getLogs({\n                    address: _config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwapETH.address,\n                    fromBlock,\n                    toBlock\n                });\n                console.log(`Found ${allLogs.length} logs for contract address, filtering by event signature`);\n                // Filter logs secara manual dengan topic signature yang benar\n                logs = allLogs.filter((log)=>log.topics && log.topics.length > 0 && log.topics[0]?.toLowerCase() === SWAP_ETH_EVENT_SIGNATURE.toLowerCase());\n                console.log(`After filtering: ${logs.length} logs match the SwapETH event signature`);\n            } catch (altError) {\n                console.error(\"Error fetching logs with alternative method 1:\", altError);\n            }\n        }\n        // Metode 3: Jika semua gagal, coba cara paling dasar dengan filter terbatas\n        if (logs.length === 0) {\n            try {\n                console.log(\"Trying alternative method 2: direct transaction fetch\");\n                // Mendapatkan semua logs tanpa filter address\n                const rawLogs = await client.getLogs({\n                    fromBlock,\n                    toBlock\n                });\n                console.log(`Retrieved ${rawLogs.length} raw logs from all addresses`);\n                // Filter manual berdasarkan address dan topic\n                logs = rawLogs.filter((log)=>log.address && log.address.toLowerCase() === _config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwapETH.address.toLowerCase() && log.topics && log.topics.length > 0 && log.topics[0]?.toLowerCase() === SWAP_ETH_EVENT_SIGNATURE.toLowerCase());\n                console.log(`After double filtering: ${logs.length} logs match the SwapETH event criteria`);\n            } catch (emergencyError) {\n                console.error(\"Emergency method failed:\", emergencyError);\n            }\n        }\n        console.log(`Total ${logs.length} raw logs found from JikunaSwapETH contract`);\n        // IMPROVED: Add all transaction hashes to debug log\n        if (logs.length > 0) {\n            console.log(\"Transaction hashes in these logs:\");\n            for (const log of logs){\n                console.log(`  - ${log.transactionHash}, block: ${log.blockNumber}`);\n            }\n        }\n        const swapEvents = [];\n        for (const log of logs){\n            try {\n                console.log(`\\nProcessing ETH log: ${JSON.stringify({\n                    blockNumber: log.blockNumber,\n                    txHash: log.transactionHash,\n                    address: log.address,\n                    topics: log.topics.map((t)=>t?.toString())\n                })}`);\n                // Basic validation\n                if (!log.transactionHash) {\n                    console.log(`Skipping ETH log with missing transaction hash`);\n                    continue;\n                }\n                // Check if we've already processed this transaction\n                const existingEvent = await (0,_lib_database_swap_events__WEBPACK_IMPORTED_MODULE_3__.getSwapEventByTxHash)(log.transactionHash);\n                if (existingEvent) {\n                    console.log(`Skipping already processed ETH tx: ${log.transactionHash}`);\n                    continue;\n                }\n                // IMPROVED: Better extraction of indexed parameters\n                // Extract sender from topic 1\n                const sender = log.topics[1] ? `0x${log.topics[1].substring(log.topics[1].length - 40)}` : undefined;\n                // Extract to address from topic 2\n                const to = log.topics[2] ? `0x${log.topics[2].substring(log.topics[2].length - 40)}` : undefined;\n                // Extract token from topic 3\n                const token = log.topics[3] ? `0x${log.topics[3].substring(log.topics[3].length - 40)}` : undefined;\n                console.log(`Extracted parameters: sender=${sender}, to=${to}, token=${token}`);\n                if (!sender) {\n                    console.log(`Skipping ETH log due to missing sender address`);\n                    continue;\n                }\n                // Default values if we can't extract properly\n                const usedToken = token || _config_contracts__WEBPACK_IMPORTED_MODULE_2__.contracts.jikunaSwap.address;\n                // Try to parse non-indexed values from data\n                let ethAmount = BigInt(0);\n                let tokenAmount = BigInt(0);\n                let ethToToken = false;\n                try {\n                    if (log.data && log.data !== \"0x\") {\n                        // Simplified parsing - would need proper ABI decoding in production\n                        const data = log.data.slice(2); // remove '0x'\n                        if (data.length >= 128) {\n                            ethAmount = BigInt(\"0x\" + data.slice(0, 64));\n                            tokenAmount = BigInt(\"0x\" + data.slice(64, 128));\n                            // Last 32 bytes is bool ethToToken - 0 is false, 1 is true\n                            const ethToTokenValue = data.slice(128, 132); // first 4 chars is enough\n                            ethToToken = ethToTokenValue !== \"0000\";\n                            console.log(`Parsed ETH data: ethAmount=${ethAmount}, tokenAmount=${tokenAmount}, ethToToken=${ethToToken}`);\n                        }\n                    }\n                } catch (decodeError) {\n                    console.error(\"Error decoding ETH data:\", decodeError);\n                    // Use default values as fallback\n                    console.log(\"Using default values due to ETH decode error\");\n                    ethAmount = BigInt(\"1000000000000000000\"); // 1 ETH as fallback\n                    tokenAmount = BigInt(\"1000000000000000000\"); // 1 token as fallback\n                    ethToToken = true; // Default swap direction\n                }\n                // Set default values if both are zero\n                const finalEthAmount = ethAmount > 0 ? ethAmount : BigInt(\"1000000000000000000\");\n                const finalTokenAmount = tokenAmount > 0 ? tokenAmount : BigInt(\"1000000000000000000\");\n                // Volume in MON is the ETH amount\n                const volumeMON = Number((0,viem__WEBPACK_IMPORTED_MODULE_0__.formatEther)(finalEthAmount));\n                // Calculate JXP (1 JXP per 10 MON volume)\n                const calculatedJXP = Math.floor(volumeMON / 10);\n                // Set token in and out based on swap direction\n                const tokenIn = ethToToken ? _config_chains__WEBPACK_IMPORTED_MODULE_1__.NATIVE_TOKEN_ADDRESS : usedToken;\n                const tokenOut = ethToToken ? usedToken : _config_chains__WEBPACK_IMPORTED_MODULE_1__.NATIVE_TOKEN_ADDRESS;\n                const amountIn = ethToToken ? finalEthAmount : finalTokenAmount;\n                const amountOut = ethToToken ? finalTokenAmount : finalEthAmount;\n                const swapEvent = {\n                    user: sender,\n                    timestamp: new Date(),\n                    txHash: log.transactionHash,\n                    tokenIn,\n                    tokenOut,\n                    amountIn: amountIn.toString(),\n                    amountOut: amountOut.toString(),\n                    volumeMON,\n                    calculatedJXP,\n                    processed: false\n                };\n                console.log(`Created ETH swap event: ${JSON.stringify(swapEvent)}`);\n                swapEvents.push(swapEvent);\n            } catch (logError) {\n                console.error(`Error processing individual ETH log: ${logError}`);\n            }\n        }\n        return swapEvents;\n    } catch (error) {\n        console.error(\"Error fetching JikunaSwapETH events:\", error);\n        return [];\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/blockchain/event-listener.ts\n");

/***/ }),

/***/ "(api)/./lib/database/mongodb.ts":
/*!*********************************!*\
  !*** ./lib/database/mongodb.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clientPromise: () => (/* binding */ clientPromise),\n/* harmony export */   getDb: () => (/* binding */ getDb),\n/* harmony export */   getJXPUpdatesCollection: () => (/* binding */ getJXPUpdatesCollection),\n/* harmony export */   getSwapEventsCollection: () => (/* binding */ getSwapEventsCollection),\n/* harmony export */   getSystemStatsCollection: () => (/* binding */ getSystemStatsCollection)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n\nif (!process.env.MONGODB_URI) {\n    throw new Error(\"Please define the MONGODB_URI environment variable\");\n}\nconst uri = process.env.MONGODB_URI;\nconst options = {};\nlet client;\nlet clientPromise;\nlet db;\nif (true) {\n    // In development mode, use a global variable so that the value\n    // is preserved across module reloads caused by HMR (Hot Module Replacement).\n    let globalWithMongo = global;\n    if (!globalWithMongo._mongoClientPromise) {\n        client = new mongodb__WEBPACK_IMPORTED_MODULE_0__.MongoClient(uri, options);\n        globalWithMongo._mongoClientPromise = client.connect();\n    }\n    // Pastikan clientPromise tidak undefined\n    clientPromise = globalWithMongo._mongoClientPromise;\n} else {}\nasync function getDb() {\n    if (!db) {\n        const connectedClient = await clientPromise;\n        db = connectedClient.db(\"jikuna-jxp\");\n    }\n    return db;\n}\nasync function getSwapEventsCollection() {\n    const db = await getDb();\n    return db.collection(\"swapEvents\");\n}\nasync function getJXPUpdatesCollection() {\n    const db = await getDb();\n    return db.collection(\"jxpUpdates\");\n}\nasync function getSystemStatsCollection() {\n    const db = await getDb();\n    return db.collection(\"systemStats\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvZGF0YWJhc2UvbW9uZ29kYi50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXFEO0FBSXJELElBQUksQ0FBQ0MsUUFBUUMsR0FBRyxDQUFDQyxXQUFXLEVBQUU7SUFDNUIsTUFBTSxJQUFJQyxNQUFNO0FBQ2xCO0FBRUEsTUFBTUMsTUFBTUosUUFBUUMsR0FBRyxDQUFDQyxXQUFXO0FBQ25DLE1BQU1HLFVBQVUsQ0FBQztBQUVqQixJQUFJQztBQUNKLElBQUlDO0FBQ0osSUFBSUM7QUFFSixJQUFJUixJQUF5QixFQUFlO0lBQzFDLCtEQUErRDtJQUMvRCw2RUFBNkU7SUFDN0UsSUFBSVMsa0JBQWtCQztJQUl0QixJQUFJLENBQUNELGdCQUFnQkUsbUJBQW1CLEVBQUU7UUFDeENMLFNBQVMsSUFBSVAsZ0RBQVdBLENBQUNLLEtBQUtDO1FBQzlCSSxnQkFBZ0JFLG1CQUFtQixHQUFHTCxPQUFPTSxPQUFPO0lBQ3REO0lBQ0EseUNBQXlDO0lBQ3pDTCxnQkFBZ0JFLGdCQUFnQkUsbUJBQW1CO0FBQ3JELE9BQU8sRUFJTjtBQUVNLGVBQWVFO0lBQ3BCLElBQUksQ0FBQ0wsSUFBSTtRQUNQLE1BQU1NLGtCQUFrQixNQUFNUDtRQUM5QkMsS0FBS00sZ0JBQWdCTixFQUFFLENBQUM7SUFDMUI7SUFDQSxPQUFPQTtBQUNUO0FBRU8sZUFBZU87SUFDcEIsTUFBTVAsS0FBSyxNQUFNSztJQUNqQixPQUFPTCxHQUFHUSxVQUFVLENBQVk7QUFDbEM7QUFFTyxlQUFlQztJQUNwQixNQUFNVCxLQUFLLE1BQU1LO0lBQ2pCLE9BQU9MLEdBQUdRLFVBQVUsQ0FBWTtBQUNsQztBQUVPLGVBQWVFO0lBQ3BCLE1BQU1WLEtBQUssTUFBTUs7SUFDakIsT0FBT0wsR0FBR1EsVUFBVSxDQUFjO0FBQ3BDO0FBRXdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamlrdW5hLXN3YXAtYmFja2VuZC8uL2xpYi9kYXRhYmFzZS9tb25nb2RiLnRzPzhiNDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9uZ29DbGllbnQsIERiLCBDb2xsZWN0aW9uIH0gZnJvbSAnbW9uZ29kYidcclxuaW1wb3J0IHsgU3dhcEV2ZW50IH0gZnJvbSAnQC90eXBlcy9zd2FwLWV2ZW50J1xyXG5pbXBvcnQgeyBKWFBVcGRhdGUsIFN5c3RlbVN0YXRzIH0gZnJvbSAnQC90eXBlcy9qeHAtdXBkYXRlJ1xyXG5cclxuaWYgKCFwcm9jZXNzLmVudi5NT05HT0RCX1VSSSkge1xyXG4gIHRocm93IG5ldyBFcnJvcignUGxlYXNlIGRlZmluZSB0aGUgTU9OR09EQl9VUkkgZW52aXJvbm1lbnQgdmFyaWFibGUnKVxyXG59XHJcblxyXG5jb25zdCB1cmkgPSBwcm9jZXNzLmVudi5NT05HT0RCX1VSSVxyXG5jb25zdCBvcHRpb25zID0ge31cclxuXHJcbmxldCBjbGllbnQ6IE1vbmdvQ2xpZW50XHJcbmxldCBjbGllbnRQcm9taXNlOiBQcm9taXNlPE1vbmdvQ2xpZW50PlxyXG5sZXQgZGI6IERiXHJcblxyXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcclxuICAvLyBJbiBkZXZlbG9wbWVudCBtb2RlLCB1c2UgYSBnbG9iYWwgdmFyaWFibGUgc28gdGhhdCB0aGUgdmFsdWVcclxuICAvLyBpcyBwcmVzZXJ2ZWQgYWNyb3NzIG1vZHVsZSByZWxvYWRzIGNhdXNlZCBieSBITVIgKEhvdCBNb2R1bGUgUmVwbGFjZW1lbnQpLlxyXG4gIGxldCBnbG9iYWxXaXRoTW9uZ28gPSBnbG9iYWwgYXMgdHlwZW9mIGdsb2JhbFRoaXMgJiB7XHJcbiAgICBfbW9uZ29DbGllbnRQcm9taXNlPzogUHJvbWlzZTxNb25nb0NsaWVudD5cclxuICB9XHJcblxyXG4gIGlmICghZ2xvYmFsV2l0aE1vbmdvLl9tb25nb0NsaWVudFByb21pc2UpIHtcclxuICAgIGNsaWVudCA9IG5ldyBNb25nb0NsaWVudCh1cmksIG9wdGlvbnMpXHJcbiAgICBnbG9iYWxXaXRoTW9uZ28uX21vbmdvQ2xpZW50UHJvbWlzZSA9IGNsaWVudC5jb25uZWN0KClcclxuICB9XHJcbiAgLy8gUGFzdGlrYW4gY2xpZW50UHJvbWlzZSB0aWRhayB1bmRlZmluZWRcclxuICBjbGllbnRQcm9taXNlID0gZ2xvYmFsV2l0aE1vbmdvLl9tb25nb0NsaWVudFByb21pc2UgYXMgUHJvbWlzZTxNb25nb0NsaWVudD5cclxufSBlbHNlIHtcclxuICAvLyBJbiBwcm9kdWN0aW9uIG1vZGUsIGl0J3MgYmVzdCB0byBub3QgdXNlIGEgZ2xvYmFsIHZhcmlhYmxlLlxyXG4gIGNsaWVudCA9IG5ldyBNb25nb0NsaWVudCh1cmksIG9wdGlvbnMpXHJcbiAgY2xpZW50UHJvbWlzZSA9IGNsaWVudC5jb25uZWN0KClcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldERiKCk6IFByb21pc2U8RGI+IHtcclxuICBpZiAoIWRiKSB7XHJcbiAgICBjb25zdCBjb25uZWN0ZWRDbGllbnQgPSBhd2FpdCBjbGllbnRQcm9taXNlXHJcbiAgICBkYiA9IGNvbm5lY3RlZENsaWVudC5kYignamlrdW5hLWp4cCcpXHJcbiAgfVxyXG4gIHJldHVybiBkYlxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U3dhcEV2ZW50c0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPFN3YXBFdmVudD4+IHtcclxuICBjb25zdCBkYiA9IGF3YWl0IGdldERiKClcclxuICByZXR1cm4gZGIuY29sbGVjdGlvbjxTd2FwRXZlbnQ+KCdzd2FwRXZlbnRzJylcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEpYUFVwZGF0ZXNDb2xsZWN0aW9uKCk6IFByb21pc2U8Q29sbGVjdGlvbjxKWFBVcGRhdGU+PiB7XHJcbiAgY29uc3QgZGIgPSBhd2FpdCBnZXREYigpXHJcbiAgcmV0dXJuIGRiLmNvbGxlY3Rpb248SlhQVXBkYXRlPignanhwVXBkYXRlcycpXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTeXN0ZW1TdGF0c0NvbGxlY3Rpb24oKTogUHJvbWlzZTxDb2xsZWN0aW9uPFN5c3RlbVN0YXRzPj4ge1xyXG4gIGNvbnN0IGRiID0gYXdhaXQgZ2V0RGIoKVxyXG4gIHJldHVybiBkYi5jb2xsZWN0aW9uPFN5c3RlbVN0YXRzPignc3lzdGVtU3RhdHMnKVxyXG59XHJcblxyXG5leHBvcnQgeyBjbGllbnRQcm9taXNlIH0gIl0sIm5hbWVzIjpbIk1vbmdvQ2xpZW50IiwicHJvY2VzcyIsImVudiIsIk1PTkdPREJfVVJJIiwiRXJyb3IiLCJ1cmkiLCJvcHRpb25zIiwiY2xpZW50IiwiY2xpZW50UHJvbWlzZSIsImRiIiwiZ2xvYmFsV2l0aE1vbmdvIiwiZ2xvYmFsIiwiX21vbmdvQ2xpZW50UHJvbWlzZSIsImNvbm5lY3QiLCJnZXREYiIsImNvbm5lY3RlZENsaWVudCIsImdldFN3YXBFdmVudHNDb2xsZWN0aW9uIiwiY29sbGVjdGlvbiIsImdldEpYUFVwZGF0ZXNDb2xsZWN0aW9uIiwiZ2V0U3lzdGVtU3RhdHNDb2xsZWN0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/database/mongodb.ts\n");

/***/ }),

/***/ "(api)/./lib/database/swap-events.ts":
/*!*************************************!*\
  !*** ./lib/database/swap-events.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRecentSwapEvents: () => (/* binding */ getRecentSwapEvents),\n/* harmony export */   getSwapEventByTxHash: () => (/* binding */ getSwapEventByTxHash),\n/* harmony export */   getTotalProcessedSwaps: () => (/* binding */ getTotalProcessedSwaps),\n/* harmony export */   getUnprocessedSwapEvents: () => (/* binding */ getUnprocessedSwapEvents),\n/* harmony export */   markSwapEventsAsProcessed: () => (/* binding */ markSwapEventsAsProcessed),\n/* harmony export */   saveSwapEvent: () => (/* binding */ saveSwapEvent),\n/* harmony export */   saveSwapEvents: () => (/* binding */ saveSwapEvents)\n/* harmony export */ });\n/* harmony import */ var _mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mongodb */ \"(api)/./lib/database/mongodb.ts\");\n\nasync function saveSwapEvent(swapEvent) {\n    const collection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.getSwapEventsCollection)();\n    await collection.insertOne(swapEvent);\n}\nasync function saveSwapEvents(swapEvents) {\n    if (swapEvents.length === 0) return;\n    const collection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.getSwapEventsCollection)();\n    await collection.insertMany(swapEvents);\n}\nasync function getUnprocessedSwapEvents() {\n    const collection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.getSwapEventsCollection)();\n    return collection.find({\n        processed: false\n    }).toArray();\n}\nasync function markSwapEventsAsProcessed(swapEventIds) {\n    if (swapEventIds.length === 0) return;\n    const collection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.getSwapEventsCollection)();\n    const now = new Date();\n    await collection.updateMany({\n        _id: {\n            $in: swapEventIds\n        }\n    }, {\n        $set: {\n            processed: true,\n            processedAt: now\n        }\n    });\n}\nasync function getSwapEventByTxHash(txHash) {\n    const collection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.getSwapEventsCollection)();\n    return collection.findOne({\n        txHash\n    });\n}\nasync function getTotalProcessedSwaps() {\n    const collection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.getSwapEventsCollection)();\n    return collection.countDocuments({\n        processed: true\n    });\n}\nasync function getRecentSwapEvents(limit = 10) {\n    const collection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_0__.getSwapEventsCollection)();\n    return collection.find().sort({\n        timestamp: -1\n    }).limit(limit).toArray();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvZGF0YWJhc2Uvc3dhcC1ldmVudHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBbUQ7QUFHNUMsZUFBZUMsY0FBY0MsU0FBb0I7SUFDdEQsTUFBTUMsYUFBYSxNQUFNSCxpRUFBdUJBO0lBQ2hELE1BQU1HLFdBQVdDLFNBQVMsQ0FBQ0Y7QUFDN0I7QUFFTyxlQUFlRyxlQUFlQyxVQUF1QjtJQUMxRCxJQUFJQSxXQUFXQyxNQUFNLEtBQUssR0FBRztJQUM3QixNQUFNSixhQUFhLE1BQU1ILGlFQUF1QkE7SUFDaEQsTUFBTUcsV0FBV0ssVUFBVSxDQUFDRjtBQUM5QjtBQUVPLGVBQWVHO0lBQ3BCLE1BQU1OLGFBQWEsTUFBTUgsaUVBQXVCQTtJQUNoRCxPQUFPRyxXQUFXTyxJQUFJLENBQUM7UUFBRUMsV0FBVztJQUFNLEdBQUdDLE9BQU87QUFDdEQ7QUFFTyxlQUFlQywwQkFBMEJDLFlBQXNCO0lBQ3BFLElBQUlBLGFBQWFQLE1BQU0sS0FBSyxHQUFHO0lBQy9CLE1BQU1KLGFBQWEsTUFBTUgsaUVBQXVCQTtJQUNoRCxNQUFNZSxNQUFNLElBQUlDO0lBRWhCLE1BQU1iLFdBQVdjLFVBQVUsQ0FDekI7UUFBRUMsS0FBSztZQUFFQyxLQUFLTDtRQUFhO0lBQUUsR0FDN0I7UUFBRU0sTUFBTTtZQUFFVCxXQUFXO1lBQU1VLGFBQWFOO1FBQUk7SUFBRTtBQUVsRDtBQUVPLGVBQWVPLHFCQUFxQkMsTUFBYztJQUN2RCxNQUFNcEIsYUFBYSxNQUFNSCxpRUFBdUJBO0lBQ2hELE9BQU9HLFdBQVdxQixPQUFPLENBQUM7UUFBRUQ7SUFBTztBQUNyQztBQUVPLGVBQWVFO0lBQ3BCLE1BQU10QixhQUFhLE1BQU1ILGlFQUF1QkE7SUFDaEQsT0FBT0csV0FBV3VCLGNBQWMsQ0FBQztRQUFFZixXQUFXO0lBQUs7QUFDckQ7QUFFTyxlQUFlZ0Isb0JBQW9CQyxRQUFnQixFQUFFO0lBQzFELE1BQU16QixhQUFhLE1BQU1ILGlFQUF1QkE7SUFDaEQsT0FBT0csV0FDSk8sSUFBSSxHQUNKbUIsSUFBSSxDQUFDO1FBQUVDLFdBQVcsQ0FBQztJQUFFLEdBQ3JCRixLQUFLLENBQUNBLE9BQ05oQixPQUFPO0FBQ1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qaWt1bmEtc3dhcC1iYWNrZW5kLy4vbGliL2RhdGFiYXNlL3N3YXAtZXZlbnRzLnRzPzZiM2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0U3dhcEV2ZW50c0NvbGxlY3Rpb24gfSBmcm9tICcuL21vbmdvZGInXHJcbmltcG9ydCB7IFN3YXBFdmVudCB9IGZyb20gJ0AvdHlwZXMvc3dhcC1ldmVudCdcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlU3dhcEV2ZW50KHN3YXBFdmVudDogU3dhcEV2ZW50KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc3QgY29sbGVjdGlvbiA9IGF3YWl0IGdldFN3YXBFdmVudHNDb2xsZWN0aW9uKClcclxuICBhd2FpdCBjb2xsZWN0aW9uLmluc2VydE9uZShzd2FwRXZlbnQpXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlU3dhcEV2ZW50cyhzd2FwRXZlbnRzOiBTd2FwRXZlbnRbXSk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGlmIChzd2FwRXZlbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuXHJcbiAgY29uc3QgY29sbGVjdGlvbiA9IGF3YWl0IGdldFN3YXBFdmVudHNDb2xsZWN0aW9uKClcclxuICBhd2FpdCBjb2xsZWN0aW9uLmluc2VydE1hbnkoc3dhcEV2ZW50cylcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFVucHJvY2Vzc2VkU3dhcEV2ZW50cygpOiBQcm9taXNlPFN3YXBFdmVudFtdPiB7XHJcbiAgY29uc3QgY29sbGVjdGlvbiA9IGF3YWl0IGdldFN3YXBFdmVudHNDb2xsZWN0aW9uKClcclxuICByZXR1cm4gY29sbGVjdGlvbi5maW5kKHsgcHJvY2Vzc2VkOiBmYWxzZSB9KS50b0FycmF5KClcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1hcmtTd2FwRXZlbnRzQXNQcm9jZXNzZWQoc3dhcEV2ZW50SWRzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGlmIChzd2FwRXZlbnRJZHMubGVuZ3RoID09PSAwKSByZXR1cm5cclxuICBjb25zdCBjb2xsZWN0aW9uID0gYXdhaXQgZ2V0U3dhcEV2ZW50c0NvbGxlY3Rpb24oKVxyXG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKClcclxuICBcclxuICBhd2FpdCBjb2xsZWN0aW9uLnVwZGF0ZU1hbnkoXHJcbiAgICB7IF9pZDogeyAkaW46IHN3YXBFdmVudElkcyB9IH0sXHJcbiAgICB7ICRzZXQ6IHsgcHJvY2Vzc2VkOiB0cnVlLCBwcm9jZXNzZWRBdDogbm93IH0gfVxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN3YXBFdmVudEJ5VHhIYXNoKHR4SGFzaDogc3RyaW5nKTogUHJvbWlzZTxTd2FwRXZlbnQgfCBudWxsPiB7XHJcbiAgY29uc3QgY29sbGVjdGlvbiA9IGF3YWl0IGdldFN3YXBFdmVudHNDb2xsZWN0aW9uKClcclxuICByZXR1cm4gY29sbGVjdGlvbi5maW5kT25lKHsgdHhIYXNoIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRUb3RhbFByb2Nlc3NlZFN3YXBzKCk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgY29uc3QgY29sbGVjdGlvbiA9IGF3YWl0IGdldFN3YXBFdmVudHNDb2xsZWN0aW9uKClcclxuICByZXR1cm4gY29sbGVjdGlvbi5jb3VudERvY3VtZW50cyh7IHByb2Nlc3NlZDogdHJ1ZSB9KVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UmVjZW50U3dhcEV2ZW50cyhsaW1pdDogbnVtYmVyID0gMTApOiBQcm9taXNlPFN3YXBFdmVudFtdPiB7XHJcbiAgY29uc3QgY29sbGVjdGlvbiA9IGF3YWl0IGdldFN3YXBFdmVudHNDb2xsZWN0aW9uKClcclxuICByZXR1cm4gY29sbGVjdGlvblxyXG4gICAgLmZpbmQoKVxyXG4gICAgLnNvcnQoeyB0aW1lc3RhbXA6IC0xIH0pXHJcbiAgICAubGltaXQobGltaXQpXHJcbiAgICAudG9BcnJheSgpXHJcbn0gIl0sIm5hbWVzIjpbImdldFN3YXBFdmVudHNDb2xsZWN0aW9uIiwic2F2ZVN3YXBFdmVudCIsInN3YXBFdmVudCIsImNvbGxlY3Rpb24iLCJpbnNlcnRPbmUiLCJzYXZlU3dhcEV2ZW50cyIsInN3YXBFdmVudHMiLCJsZW5ndGgiLCJpbnNlcnRNYW55IiwiZ2V0VW5wcm9jZXNzZWRTd2FwRXZlbnRzIiwiZmluZCIsInByb2Nlc3NlZCIsInRvQXJyYXkiLCJtYXJrU3dhcEV2ZW50c0FzUHJvY2Vzc2VkIiwic3dhcEV2ZW50SWRzIiwibm93IiwiRGF0ZSIsInVwZGF0ZU1hbnkiLCJfaWQiLCIkaW4iLCIkc2V0IiwicHJvY2Vzc2VkQXQiLCJnZXRTd2FwRXZlbnRCeVR4SGFzaCIsInR4SGFzaCIsImZpbmRPbmUiLCJnZXRUb3RhbFByb2Nlc3NlZFN3YXBzIiwiY291bnREb2N1bWVudHMiLCJnZXRSZWNlbnRTd2FwRXZlbnRzIiwibGltaXQiLCJzb3J0IiwidGltZXN0YW1wIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/database/swap-events.ts\n");

/***/ }),

/***/ "(api)/./lib/utils/auth.ts":
/*!***************************!*\
  !*** ./lib/utils/auth.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   verifyAdminApiKey: () => (/* binding */ verifyAdminApiKey),\n/* harmony export */   verifyCronSecret: () => (/* binding */ verifyCronSecret)\n/* harmony export */ });\n/**\r\n * Memverifikasi API key untuk endpoint admin\r\n */ function verifyAdminApiKey(req) {\n    const apiKey = req.headers[\"x-api-key\"];\n    const validApiKey = process.env.ADMIN_API_KEY || \"admin123\"; // Use default for development\n    return apiKey === validApiKey;\n}\n/**\r\n * Memverifikasi cron secret untuk endpoint cron jobs\r\n */ function verifyCronSecret(req) {\n    const cronSecret = req.headers[\"x-cron-secret\"];\n    const validCronSecret = process.env.CRON_SECRET || \"admin123\"; // Use default for development\n    return cronSecret === validCronSecret;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvdXRpbHMvYXV0aC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUVBOztDQUVDLEdBQ00sU0FBU0Esa0JBQWtCQyxHQUFtQjtJQUNuRCxNQUFNQyxTQUFTRCxJQUFJRSxPQUFPLENBQUMsWUFBWTtJQUN2QyxNQUFNQyxjQUFjQyxRQUFRQyxHQUFHLENBQUNDLGFBQWEsSUFBSSxZQUFZLDhCQUE4QjtJQUUzRixPQUFPTCxXQUFXRTtBQUNwQjtBQUVBOztDQUVDLEdBQ00sU0FBU0ksaUJBQWlCUCxHQUFtQjtJQUNsRCxNQUFNUSxhQUFhUixJQUFJRSxPQUFPLENBQUMsZ0JBQWdCO0lBQy9DLE1BQU1PLGtCQUFrQkwsUUFBUUMsR0FBRyxDQUFDSyxXQUFXLElBQUksWUFBWSw4QkFBOEI7SUFFN0YsT0FBT0YsZUFBZUM7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qaWt1bmEtc3dhcC1iYWNrZW5kLy4vbGliL3V0aWxzL2F1dGgudHM/YTg0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCB9IGZyb20gJ25leHQnXHJcblxyXG4vKipcclxuICogTWVtdmVyaWZpa2FzaSBBUEkga2V5IHVudHVrIGVuZHBvaW50IGFkbWluXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5QWRtaW5BcGlLZXkocmVxOiBOZXh0QXBpUmVxdWVzdCk6IGJvb2xlYW4ge1xyXG4gIGNvbnN0IGFwaUtleSA9IHJlcS5oZWFkZXJzWyd4LWFwaS1rZXknXTtcclxuICBjb25zdCB2YWxpZEFwaUtleSA9IHByb2Nlc3MuZW52LkFETUlOX0FQSV9LRVkgfHwgJ2FkbWluMTIzJzsgLy8gVXNlIGRlZmF1bHQgZm9yIGRldmVsb3BtZW50XHJcbiAgXHJcbiAgcmV0dXJuIGFwaUtleSA9PT0gdmFsaWRBcGlLZXk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNZW12ZXJpZmlrYXNpIGNyb24gc2VjcmV0IHVudHVrIGVuZHBvaW50IGNyb24gam9ic1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHZlcmlmeUNyb25TZWNyZXQocmVxOiBOZXh0QXBpUmVxdWVzdCk6IGJvb2xlYW4ge1xyXG4gIGNvbnN0IGNyb25TZWNyZXQgPSByZXEuaGVhZGVyc1sneC1jcm9uLXNlY3JldCddO1xyXG4gIGNvbnN0IHZhbGlkQ3JvblNlY3JldCA9IHByb2Nlc3MuZW52LkNST05fU0VDUkVUIHx8ICdhZG1pbjEyMyc7IC8vIFVzZSBkZWZhdWx0IGZvciBkZXZlbG9wbWVudFxyXG4gIFxyXG4gIHJldHVybiBjcm9uU2VjcmV0ID09PSB2YWxpZENyb25TZWNyZXQ7XHJcbn0gIl0sIm5hbWVzIjpbInZlcmlmeUFkbWluQXBpS2V5IiwicmVxIiwiYXBpS2V5IiwiaGVhZGVycyIsInZhbGlkQXBpS2V5IiwicHJvY2VzcyIsImVudiIsIkFETUlOX0FQSV9LRVkiLCJ2ZXJpZnlDcm9uU2VjcmV0IiwiY3JvblNlY3JldCIsInZhbGlkQ3JvblNlY3JldCIsIkNST05fU0VDUkVUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/utils/auth.ts\n");

/***/ }),

/***/ "(api)/./pages/api/jxp/events/fetch-swap-events.ts":
/*!***************************************************!*\
  !*** ./pages/api/jxp/events/fetch-swap-events.ts ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_blockchain_event_listener__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/blockchain/event-listener */ \"(api)/./lib/blockchain/event-listener.ts\");\n/* harmony import */ var _lib_utils_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/utils/auth */ \"(api)/./lib/utils/auth.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_blockchain_event_listener__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_blockchain_event_listener__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n/**\r\n * API endpoint to fetch new swap events from blockchain\r\n * Called by Vercel cron job every hour\r\n */ async function handler(req, res) {\n    // Only allow POST requests\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            success: false,\n            error: \"Method not allowed\"\n        });\n    }\n    // Verifikasi token cron untuk keamanan\n    const authorized = (0,_lib_utils_auth__WEBPACK_IMPORTED_MODULE_1__.verifyCronSecret)(req);\n    if (!authorized) {\n        return res.status(401).json({\n            success: false,\n            message: \"Unauthorized. Missing or invalid cron secret.\"\n        });\n    }\n    try {\n        // Fetch new swap events\n        const { swapEvents, newSwapsCount } = await (0,_lib_blockchain_event_listener__WEBPACK_IMPORTED_MODULE_0__.fetchNewSwapEvents)();\n        // Return success\n        return res.status(200).json({\n            success: true,\n            newSwapsCount,\n            message: `Successfully fetched ${newSwapsCount} new swap events`\n        });\n    } catch (error) {\n        console.error(\"Error in fetch-swap-events API:\", error);\n        return res.status(500).json({\n            success: false,\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvanhwL2V2ZW50cy9mZXRjaC1zd2FwLWV2ZW50cy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDb0U7QUFDakI7QUFFbkQ7OztDQUdDLEdBQ2MsZUFBZUUsUUFDNUJDLEdBQW1CLEVBQ25CQyxHQUFvQjtJQUVwQiwyQkFBMkI7SUFDM0IsSUFBSUQsSUFBSUUsTUFBTSxLQUFLLFFBQVE7UUFDekIsT0FBT0QsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUFFQyxTQUFTO1lBQU9DLE9BQU87UUFBcUI7SUFDNUU7SUFFQSx1Q0FBdUM7SUFDdkMsTUFBTUMsYUFBYVQsaUVBQWdCQSxDQUFDRTtJQUNwQyxJQUFJLENBQUNPLFlBQVk7UUFDZixPQUFPTixJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQzFCQyxTQUFTO1lBQ1RHLFNBQVM7UUFDWDtJQUNGO0lBRUEsSUFBSTtRQUNGLHdCQUF3QjtRQUN4QixNQUFNLEVBQUVDLFVBQVUsRUFBRUMsYUFBYSxFQUFFLEdBQUcsTUFBTWIsa0ZBQWtCQTtRQUU5RCxpQkFBaUI7UUFDakIsT0FBT0ksSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUMxQkMsU0FBUztZQUNUSztZQUNBRixTQUFTLENBQUMscUJBQXFCLEVBQUVFLGNBQWMsZ0JBQWdCLENBQUM7UUFDbEU7SUFDRixFQUFFLE9BQU9KLE9BQU87UUFDZEssUUFBUUwsS0FBSyxDQUFDLG1DQUFtQ0E7UUFDakQsT0FBT0wsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUMxQkMsU0FBUztZQUNUQyxPQUFPQSxpQkFBaUJNLFFBQVFOLE1BQU1FLE9BQU8sR0FBRztRQUNsRDtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qaWt1bmEtc3dhcC1iYWNrZW5kLy4vcGFnZXMvYXBpL2p4cC9ldmVudHMvZmV0Y2gtc3dhcC1ldmVudHMudHM/MTMzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCdcclxuaW1wb3J0IHsgZmV0Y2hOZXdTd2FwRXZlbnRzIH0gZnJvbSAnQC9saWIvYmxvY2tjaGFpbi9ldmVudC1saXN0ZW5lcidcclxuaW1wb3J0IHsgdmVyaWZ5Q3JvblNlY3JldCB9IGZyb20gJ0AvbGliL3V0aWxzL2F1dGgnXHJcblxyXG4vKipcclxuICogQVBJIGVuZHBvaW50IHRvIGZldGNoIG5ldyBzd2FwIGV2ZW50cyBmcm9tIGJsb2NrY2hhaW5cclxuICogQ2FsbGVkIGJ5IFZlcmNlbCBjcm9uIGpvYiBldmVyeSBob3VyXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKFxyXG4gIHJlcTogTmV4dEFwaVJlcXVlc3QsXHJcbiAgcmVzOiBOZXh0QXBpUmVzcG9uc2VcclxuKSB7XHJcbiAgLy8gT25seSBhbGxvdyBQT1NUIHJlcXVlc3RzXHJcbiAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnTWV0aG9kIG5vdCBhbGxvd2VkJyB9KVxyXG4gIH1cclxuXHJcbiAgLy8gVmVyaWZpa2FzaSB0b2tlbiBjcm9uIHVudHVrIGtlYW1hbmFuXHJcbiAgY29uc3QgYXV0aG9yaXplZCA9IHZlcmlmeUNyb25TZWNyZXQocmVxKTtcclxuICBpZiAoIWF1dGhvcml6ZWQpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMSkuanNvbih7IFxyXG4gICAgICBzdWNjZXNzOiBmYWxzZSwgXHJcbiAgICAgIG1lc3NhZ2U6ICdVbmF1dGhvcml6ZWQuIE1pc3Npbmcgb3IgaW52YWxpZCBjcm9uIHNlY3JldC4nIFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgLy8gRmV0Y2ggbmV3IHN3YXAgZXZlbnRzXHJcbiAgICBjb25zdCB7IHN3YXBFdmVudHMsIG5ld1N3YXBzQ291bnQgfSA9IGF3YWl0IGZldGNoTmV3U3dhcEV2ZW50cygpXHJcblxyXG4gICAgLy8gUmV0dXJuIHN1Y2Nlc3NcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XHJcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgIG5ld1N3YXBzQ291bnQsXHJcbiAgICAgIG1lc3NhZ2U6IGBTdWNjZXNzZnVsbHkgZmV0Y2hlZCAke25ld1N3YXBzQ291bnR9IG5ldyBzd2FwIGV2ZW50c2BcclxuICAgIH0pXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIGZldGNoLXN3YXAtZXZlbnRzIEFQSTonLCBlcnJvcilcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7XHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcclxuICAgIH0pXHJcbiAgfVxyXG59ICJdLCJuYW1lcyI6WyJmZXRjaE5ld1N3YXBFdmVudHMiLCJ2ZXJpZnlDcm9uU2VjcmV0IiwiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsInN0YXR1cyIsImpzb24iLCJzdWNjZXNzIiwiZXJyb3IiLCJhdXRob3JpemVkIiwibWVzc2FnZSIsInN3YXBFdmVudHMiLCJuZXdTd2Fwc0NvdW50IiwiY29uc29sZSIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./pages/api/jxp/events/fetch-swap-events.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fjxp%2Fevents%2Ffetch-swap-events&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cjxp%5Cevents%5Cfetch-swap-events.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();